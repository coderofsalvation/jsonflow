// Generated by CoffeeScript 1.10.0
(function() {
  var clone, jref, typeshave;

  jref = require('json-ref-lite');

  typeshave = require('typeshave').typesafe;

  clone = function(obj) {
    return JSON.parse(JSON.stringify(obj));
  };

  module.exports = (function() {
    this.opts = {
      maxrecurse: 1,
      halt: function(node, data, processed) {
        if ((node.processed != null) && node.processed === this.maxrecurse) {
          return true;
        }
        if ((data == null) || (node.process == null)) {
          return true;
        }
        return false;
      }
    };
    this.filters = {
      global: {},
      custom: {}
    };
    this._run = function(node, data, name, processed) {
      var _, err, error, filter, filtername, i, len, o, ref, ref1, result, results;
      _ = this.opts;
      if ((node != null) && !_.halt(node, data)) {
        try {
          if (process.env.DEBUG) {
            console.log("->" + node.name);
          }
          result = node.process(node, data);
          node.processed = (node.processed == null ? 1 : ++node.processed);
          ref = this.filters.global;
          for (filtername in ref) {
            filter = ref[filtername];
            filter(node, data);
          }
          ref1 = node.output;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            o = ref1[i];
            if ((o != null ? o.process : void 0) != null) {
              results.push(this._run(o, clone(data)));
            } else {
              results.push(void 0);
            }
          }
          return results;
        } catch (error) {
          err = error;
          if (err === "flow-stop") {
            return;
          }
          throw err;
        }
      }
    };
    this.run = typeshave({
      graph: {
        type: "object",
        required: true
      },
      data: {
        type: "object",
        required: true
      },
      opts: {
        type: "object",
        properties: {
          root: {
            type: "string",
            required: true
          }
        }
      }
    }, function(graph, data, opts) {
      var name, node, ref;
      graph = jref.resolve(clone(graph));
      for (name in graph) {
        node = graph[name];
        node.name = name;
        if (((ref = opts.process) != null ? ref[name] : void 0) != null) {
          node.process = opts.process[name];
        }
      }
      return this._run(graph[opts.root], data);
    });
    return this;
  })();

}).call(this);
